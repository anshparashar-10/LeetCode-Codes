class Solution {
public:
    int f(int n,int m,vector<vector<int>> & arr,vector<vector<int>> & dp){
        if(n>=0 && m>=0 && arr[n][m]==1) return 0;
        if(n==0 && m == 0) return 1;
        if(n<0 || m<0) return 0;

        if(dp[n][m]!=-1) return dp[n][m];
        int up = f(n-1,m,arr,dp);
        int left = f(n,m-1,arr,dp);

        return dp[n][m] = left+up;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();
        vector<vector<int>> dp(n,vector<int> (m,-1));
        return f(n-1,m-1,obstacleGrid,dp);
    }
};
